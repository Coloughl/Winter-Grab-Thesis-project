freq = FALSE,
breaks = 30,
las = 1)
lines(density(reportcards$AchievementScore))
#School Enrollment: Extremely right skewed
hist(reportcards$SchoolEnrollment,
main = "School Enrollment for WI Highschools",
xlab = "School Enrollment Score (Student)",
freq = FALSE,
breaks = 30,
las = 1,
lines(density(reportcards$SchoolEnrollment)))
lines(density(reportcards$SchoolEnrollment))
##Exercise 7:Calculating IQR for School accountability Score ----
IQR(reportcards$AccountabiltyScore)
skewness(reportcards$AccountabiltyScore)
##Exercise 8:Creating a box plot and histogram for Hillary voters ----
hist(reportcards$PropClinton2016,
main = "Proportion of Hillary voters in 2016",
xlab = "Votes for Hillary (%)",
freq = FALSE,
breaks = 30,
las = 1,
lines(density(reportcards$PropClinton2016)))
lines(density(reportcards$PropClinton2016))
##Exercise 9:Calculating Frequency and Percentage of Locale ----
Locale <-table(reportcards$Locale)
View(Locale) #Table shows frequency for locales
#Exercise 10:Creating a bar chart of the sample percentages and Locale
barplot(PropLocale,
main = "Proportion of WI Schools in Different Locales",
ylab = "Percentage",
xlab = "Type of Locale",
las = 1,
col = "3",
ylim = c(0,35))
PropLocale <-100*prop.table(Locale)
#Exercise 10:Creating a bar chart of the sample percentages and Locale
barplot(PropLocale,
main = "Proportion of WI Schools in Different Locales",
ylab = "Percentage",
xlab = "Type of Locale",
las = 1,
col = "3",
ylim = c(0,35))
##Exercise 11:Calculating Frequency and percentage of Acct Rating ----
AcctRating <-table(reportcards$AcctRating)
PropAcctRating <-100*prop.table(AcctRating)
##Exercise 12:Bar Chart for AcctRating
barplot(PropAcctRating,
main = "Grades for schools in WI",
ylab = "Proportion (%)",
xlab = "Grade Letter",
las = 1,
ylim = c(0,40))
#Exercise 13:Boxplot for school enrollment
boxplot(reportcards$SchoolEnrollment,
horizontal = TRUE,
xlab = "School Enrollment",
main = "School Enrollment for WI schools")
100*prop.table(table(stats$wr_hndpref,stats$fold))
#Exercise 3 ----
#Mosaic plot of hand writing preference and result of folding arms
mosaicplot(~ wr_hndpref + fold, data = stats,
main = "Student's writing and preference and how they fold their arms",
xlab = "Writing Hand Preference",
ylab = "How they fold their arms")
barplot(measur_sex,
main = "Percentages of Female and Males how they reported measurements",
xlab = "Measurement system",
ylab = "Percent (%)",
legend.text = TRUE,
las = 1,
ylim = c(0,70))
#Female AND imperial units. Male AND imperial units
100*addmargins(prop.table(table(stats$sex, stats$met_imp), margin = 1))
#Female and imperial or Male and imperial
#Percentage of females who reported in imperial and males who reported in imperial
100*addmargins(prop.table(table(stats$sex, stats$met_imp), margin = 2))
100*prop.table(table(stats$sex, stats$met_imp
100*prop.table(table(stats$sex, stats$met_imp
100*prop.table(table(stats$sex, stats$met_imp))
#Female AND imperial units. Male AND imperial units
100*addmargins(prop.table(table(stats$sex, stats$met_imp), margin = 1))
#Female AND imperial units. Male AND imperial units
100*addmargins(prop.table(table(stats$sex, stats$met_imp), margin = 2))
#Female AND imperial units. Male AND imperial units
100*addmargins(prop.table(table(stats$sex, stats$met_imp), margin = 1
))
#Female AND imperial units. Male AND imperial units
100*addmargins(prop.table(table(stats$met_imp, stats$sex), margin = 2))
#Female and imperial or Male and imperial
#Percentage of females who reported in imperial and males who reported in imperial
100*prop.table(table(stats$sex, stats$met_imp))
barplot(measur_sex,
main = "Percentages of Female and Males how they reported measurements",
xlab = "Measurement system",
ylab = "Percent (%)",
legend.text = TRUE,
las = 1,
ylim = c(0,70))
measur_sex <- table(stats$sex, stats$met_imp)
barplot(measur_sex,
main = "Percentages of Females and Males how they reported measurements",
xlab = "Measurement system",
ylab = "Percent (%)",
legend.text = TRUE,
las = 1,
ylim = c(0,70))
100*prop.table(
100*prop.table(
measur_sex <- 100*prop.table(table(stats$sex, stats$met_imp))
barplot(measur_sex,
measur_sex <- 100*prop.table(table(stats$sex, stats$met_imp))
barplot(measur_sex,
main = "Percentages of Females and Males how they reported measurements",
xlab = "Measurement system",
ylab = "Percent (%)",
legend.text = TRUE,
las = 1,
ylim = c(0,70))
#Female AND imperial units. Male AND imperial units
100*prop.table(table(stats$sex, stats$met_imp))
100*prop.table(table(stats$wr_hndpref,stats$fold))
100*addmargins(prop.table(table(stats$wr_hndpref,stats$fold)), margin = 1 )
100*addmargins(prop.table(table(stats$wr_hndpref,stats$fold)), margin = 2 )
#Exercise 3 ----
#Mosaic plot of hand writing preference and result of folding arms
mosaicplot(~ wr_hndpref + fold, data = stats,
main = "Student's writing and preference and how they fold their arms",
xlab = "Writing Hand Preference",
ylab = "How they fold their arms")
100*addmargins(prop.table(table(stats$wr_hndpref,stats$fold)), margin = 1 )
100*addmargins(prop.table(table(stats$wr_hndpref,stats$fold)), margin = 2 )
100*addmargins(prop.table(table(stats$wr_hndpref,stats$fold), margin =1 ), margin = 2 )
barplot(measur_sex,
main = "Percentages of Females and Males how they reported measurements",
xlab = "Measurement system",
ylab = "Percent (%)",
legend.text = TRUE,
las = 1,
ylim = c(0,70))
curve(dbeta(x))
curve(dbeta(x, 1, 4))
curve(dbeta(x, 1, 4), -2,2)
curve(dbeta(x, 1, 4), 0, 1)
curve(dbeta(x, 2, 4), 0, 1)
N <- 10^4
x <- rbeta(N, 2, 4)
hist(x)
hist(x, probability = TRUE)
curve(dbeta(x, 2, 4), 0, 1)
curve(dbeta(x, 2, 4), 0, 1, add = TRUE)
N <- 10^4
x <- rbeta(N, 2, 4)
hist(x, probability = TRUE)
curve(dbeta(x, 2, 4), 0, 1, add = TRUE)
mean(x)
N <- 10^6
x <- rbeta(N, 2, 4)
hist(x, probability = TRUE)
N <- 10^9
x <- rbeta(N, 2, 4)
hist(x, probability = TRUE)
N <- 10^12
x <- rbeta(N, 2, 4)
hist(x, probability = TRUE)
N <- 10^4
x <- rbeta(N, 2, 4)
hist(x, probability = TRUE)
}
xbar <- NULL
for(i in 1:10000) {
xbar[1] <- mean(samp)
samp <- rexp(15, rate = 1/mu
xbar[1] <- mean(samp)
mean(rexp(15, rate = 1/4))
replicate(10^4,mean(rexp(15, rate = 1/4)))
xbar <- replicate(10^4,mean(rexp(15, rate = 1/4)))
his(xbar, probability = TRUE)
hist(xbar, probability = TRUE)
hist(xbar, probability = TRUE, breaks = 100)
hist(xbar, probability = TRUE, breaks = 1000)
hist(xbar, probability = TRUE, breaks = 1000)
hist(xbar, probability = TRUE, breaks = 100)
lines(density(xbar))
mean(xbar)
moments::skewness(xbar)
IQR(xbar)
sd(xbar)
xbar <- replicate(10^4,mean(rexp(50, rate = 1/4)))
hist(xbar, probability = TRUE, breaks = 100)
lines(density(xbar))
mean(xbar)
moments::skewness(xbar)
IQR(xbar)
sd(xbar) #Standard error of sampling distribution
4/sqrt(500)
median(rexp(15, rate = 1/4))
xbar <- replicate(10^4,median(rexp(50, rate = 1/4)))
hist(xbar, probability = TRUE, breaks = 100)
lines(density(xbar))
median(xbar)
moments::skewness(xbar)
IQR(xbar)
sd(xbar) #Standard error of sampling distribution
sd(xbar) #Standard error of sampling distribution
#Exercise 5 ----
cor(height,pulse)
View(stats)
#Exercise 5 ----
cor(stats$height,stats$pulse)
#Exercise 5 ----
cor(stats$height,stats$pulse, na.rm = TRUE)
#Exercise 5 ----
cor(stats [c('height','pulse')], na.rm = TRUE)
#Exercise 5 ----
cor(stats [c('height','pulse')])
#Exercise 5 ----
cor(stats [c('height','pulse')], use = "pairwise.complete.obs")
plot(stats$height, stats$pulse)
plot(stats$height, stats$pulse,
ylab = "Heart Rate (bpm)",
xlab = "Height (in)",
main = "Pulse vs. Height",
las = 1,
ylim = c(25,110))
#Data handling step ----
#reading in data
stats <- read.csv("stats.survey.csv",
stringsAsFactors = TRUE,
na.strings = '')
#Converting from metric to imperial measurements, 2.54 cm per inch
stats$height <- stats$height/2.54
stats$wr_hndspan <- stats$wr_hndspan/2.54
stats$nw_hndspan <- stats$nw_hndspan/2.54
#Chaning exer to factor and assigning levels
stats$exer <- as.factor(stats$exer)
levels(stats$exer) <- c("None", "Some", "Frequent")
#Changin smoke to factor and assigning levels
stats$smoke <- as.factor(stats$smoke)
levels(stats$smoke) <- c("None", "Occasional", "Regular", "Heavy")
#Metric or imperial
met_imp <- table(stats$met_imp)
View(met_imp)
Prop_met_imp <-100*prop.table(met_imp)
View(Prop_met_imp)
#Male or female
sex <- table(stats$sex)
View(sex)
Prop_sex <-100*prop.table(sex)
View(Prop_sex)
#Female and imperial or Male and imperial
#Percentage of females who reported in imperial and males who reported in imperial
100*addmargins(prop.table(table(stats$met_imp, stats$sex), margin = 2))
#Female AND imperial units. Male AND imperial units
100*prop.table(table(stats$sex, stats$met_imp))
measur_sex <- 100*prop.table(table(stats$sex, stats$met_imp))
#Female and imperial or Male and imperial
#Percentage of females who reported in imperial and males who reported in imperial
100*addmargins(prop.table(table(stats$met_imp, stats$sex), margin = 2))
#Female AND imperial units. Male AND imperial units
100*prop.table(table(stats$sex, stats$met_imp))
barplot(measur_sex,
main = "Percentages of Females and Males how they reported measurements",
xlab = "Measurement system",
ylab = "Percent (%)",
legend.text = TRUE,
las = 1,
ylim = c(0,70))
#Exercise 2 ----
#Scatterplot of hands spans of the writing hand and non writing hand
plot(stats$wr_hndspan, stats$nw_hndspan,
xlab = "Writing Hand Span (inches)",
ylab = "Non-Writing Hand Span (Inches)",
main = "Writing versus Non-Writing Hand Spans")
#Creating correlation matrix handspans (wr and nw), height, and pulse
cor(stats[c('wr_hndspan', 'nw_hndspan', 'pulse', 'height')], use = "pairwise.complete.obs")
#Exercise 3 ----
#Mosaic plot of hand writing preference and result of folding arms
mosaicplot(~ wr_hndpref + fold, data = stats,
main = "Student's writing and preference and how they fold their arms",
xlab = "Writing Hand Preference",
ylab = "How they fold their arms")
100*addmargins(prop.table(table(stats$wr_hndpref,stats$fold), margin =1 ), margin = 2 )
#Exercise 4 ----
#Calculating summary and standard deviation for pulse by exercise as level
tapply(stats$pulse, stats$exer, FUN = summary, na.rm = TRUE)
tapply(stats$pulse , stats$exer, FUN = sd, na.rm = TRUE)
#Parallel box plot of pulse separated by exercise
pulse_exer <- split(stats$pulse, stats$exer, na.rm = TRUE)
boxplot(pulse_exer, na.rm = TRUE,
xlab = "Frequency of Exercise",
ylab = "Pulse (bpm)",
main = "Heart Rates of Students and Frequency of Exercise",
las = 1,
ylim = c(30,120),
legend.text = TRUE)
#Female AND imperial units. Male AND imperial units
100*prop.table(table(stats$sex, stats$met_imp))
barplot(measur_sex,
main = "Percentages of Females and Males how they reported measurements",
xlab = "Measurement system",
ylab = "Percent (%)",
legend.text = TRUE,
las = 1,
ylim = c(0,70))
#Exercise 3 ----
#Mosaic plot of hand writing preference and result of folding arms
mosaicplot(~ wr_hndpref + fold, data = stats,
main = "Student's writing and preference and how they fold their arms",
xlab = "Writing Hand Preference",
ylab = "How they fold their arms")
100*addmargins(prop.table(table(stats$wr_hndpref,stats$fold), margin =1 ), margin = 2 )
#Exercise 4 ----
#Calculating summary and standard deviation for pulse by exercise as level
tapply(stats$pulse, stats$exer, FUN = summary, na.rm = TRUE)
tapply(stats$pulse , stats$exer, FUN = sd, na.rm = TRUE)
#Exercise 5 ----
cor(stats [c('height','pulse')], use = "pairwise.complete.obs")
plot(stats$height, stats$pulse,
ylab = "Heart Rate (bpm)",
xlab = "Height (in)",
main = "Pulse vs. Height",
las = 1,
ylim = c(25,110))
curve(dbeta(x, 1, 4), 0, 1)
curve(dbeta(x, 2, 4), 0, 1, add = TRUE)
N <- 10^4
x <- rbeta(N, 2, 4)
hist(x, probability = TRUE)
mean(x)
curve(dbeta(x, 1, 4), 0, 1)
curve(dbeta(x, 2, 4), 0, 1, add = TRUE)
N <- 10^4
x <- rbeta(N, 2, 4)
curve(pbeta(q, 1, 4), 0, 1)
curve(pbeta(p, 1, 4), 0, 1)
curve(pbeta(x, 1, 4), 0, 1)
curve(qbeta(x, 1, 4), 0, 1)
curve(rbeta(x, 1, 4), 0, 1)
set.seed(42)
#Uses vector of quanitles
curve(dbeta(x, 1, 4), 0, 1)
N <- 10^4
x <- rbeta(N, 2, 4)
hist(x, probability = TRUE)
mean(x)
N <- 10^4
x <- rbeta(N, 2, 4)
hist(x, probability = TRUE)
N <- 15
samp <- rbeta(N, rate = 0.25)
samp <- rbeta(N, 2, 4)
print(samp)
curve(samp)
curve(rbeta(samp))
curve(rbeta(N, 2,4))
line(samp)
line(samp)
print(samp)
hist(samp, probability = TRUE)
line(samp)
mean(samp)
set.seed(42)
N <- 15
samp <- rbeta(N, 2, 4)
hist(samp, probability = TRUE)
line(samp)
N <- 15
samp <- rbeta(N, 2, 4)
hist(samp, probability = TRUE)
line(samp)
set.seed(42)
N <- 15
samp <- rbeta(N, 2, 4)
hist(samp, probability = TRUE)
set.seed(42)
N <- 10^4
samp <- rbeta(N, 2, 4)
hist(samp, probability = TRUE)
N <- 10^4
samp <- pbeta(N, 2, 4)
hist(samp, probability = TRUE)
line(samp)
set.seed(42)
N <- 10^4
samp <- rbeta(N, 2, 4)
hist(samp, probability = TRUE)
(eems,absorbance)
eem_metatemplate(eem,absorbance)
#Initialize libraries
library(staRdom)
library(dplyr)
library(ggplot2)
library(eemR)
eem_metatemplate(eems,absorbance)
eem_metatemplate(eem,absorbance)
#Read in datafile directly from data generated by aqualog
eems <- eem_read("Trimmed EEMs", import_function = "aqualog")
setwd("C:/Users/ccolo/OneDrive/Documents/GitHub/Winter-Grab-Thesis-project/1-Data/CDOM/REUGreenland_V2")
#Read in datafile directly from data generated by aqualog
eems <- eem_read("Trimmed EEMs", import_function = "aqualog")
#Prepare absorbance values to be read into file
#NOTE: Absorbance data file must only contain the WAVELENGTH and ABS columns.
#Extra columns will produce errors on checkdata step
absorbance_path = ('A_ABS')
absorbance = absorbance_read(absorbance_path, order = TRUE, recursive = TRUE)
eem_metatemplate(eems,absorbance)
print(eem_metatemplate(eems,absorbance))
View(eem_metatemplate(eems,absorbance))
#Read in datafile directly from data generated by aqualog
eems <- eem_read("A_EEMs", import_function = "aqualog")
eems_trimmed <- eem_cut(eems, emission = c(0, 800))
View(eems)
eems$intensity <- eems$intensity[, eems$emission <= 800]  # Trim intensity matrix accordingly
#Read in datafile directly from data generated by aqualog
eems <- eem_read("A_EEMs", import_function = "aqualog")
eems_trimmed <- lapply(eems, function(eem) {
eems$emission <- eems$emission[eems$emission <= 800]  # Trim emission wavelengths
eems$intensity <- eems$intensity[, eems$emission <= 800]  # Trim intensity matrix accordingly
eem
})
View(eems_trimmed)
#Overview of raw reads (generates one overview per sample)
eem_overview_plot(eems, spp=9, contour = TRUE)
#Prepare absorbance values to be read into file
#NOTE: Absorbance data file must only contain the WAVELENGTH and ABS columns.
#Extra columns will produce errors on checkdata step
absorbance_path = ('A_ABS')
absorbance = absorbance_read(absorbance_path, order = TRUE, recursive = TRUE)
#Run check on dataset. Fix errors before proceeding
eem_checkdata(eems, absorbance)
#Read in datafile directly from data generated by aqualog
eems <- eem_read("A_EEMs", import_function = "aqualog")
eems_trimmed <- lapply(eems, function(eem) {
eems$emission <- eems$emission[eems$emission <= 799]  # Trim emission wavelengths
eems$intensity <- eems$intensity[, eems$emission <= 799]  # Trim intensity matrix accordingly
eem
})
#Run check on dataset. Fix errors before proceeding
eem_checkdata(eems, absorbance)
#Run check on dataset. Fix errors before proceeding
eem_checkdata(eems_trimmed, absorbance)
#Run check on dataset. Fix errors before proceeding
eem_checkdata(eems_trimmed, absorbance)
#Read in datafile directly from data generated by aqualog
eems <- eem_read("A_EEMs", import_function = "aqualog")
eems_trimmed <- lapply(eems, function(eem) {
eems$emission <- eems$emission[eems$emission <= 799]  # Trim emission wavelengths
eems$intensity <- eems$intensity[, eems$emission <= 799]  # Trim intensity matrix accordingly
eem
})
#Prepare absorbance values to be read into file
#NOTE: Absorbance data file must only contain the WAVELENGTH and ABS columns.
#Extra columns will produce errors on checkdata step
absorbance_path = ('A_ABS')
absorbance = absorbance_read(absorbance_path, order = TRUE, recursive = TRUE)
#Run check on dataset. Fix errors before proceeding
eem_checkdata(eems_trimmed, absorbance)
class(eems)
class(eems_trimmed)
if (inherits (eems, "eemlist")) {
eems$emission <- eems$emission[eems$emission <= 799]  # Trim emission wavelengths
if (inherits (eems, "eemlist")) {
eems_trimmed <- lapply(eems, function(eem) {
eems$emission <- eems$emission[eems$emission <= 799]  # Trim emission wavelengths
eems$intensity <- eems$intensity[, eems$emission <= 799]  # Trim intensity matrix accordingly
eem
})
#Run check on dataset. Fix errors before proceeding
eem_checkdata(eems_trimmed, absorbance)
#Run check on dataset. Fix errors before proceeding
eem_checkdata(eems_trimmed, absorbance)
if (inherits (eems, "eemlist"))
eems_trimmed <- lapply(eems, function(eem) {
eems$emission <- eems$emission[eems$emission <= 799]  # Trim emission wavelengths
eems$intensity <- eems$intensity[, eems$emission <= 799]  # Trim intensity matrix accordingly
eem
})
#Run check on dataset. Fix errors before proceeding
eem_checkdata(eems_trimmed, absorbance)
#Correct for instrumental baseline drift
absorbance = abs_blcor(absorbance, wlrange = c(780, 800))
#Remove Blanks
eems = eem_remove_blank(eems)
#Inner Filter Correction
eems = eem_ife_correction(eems, absorbance, cuvl = 1)
#Examine overview plots post-correction
eem_overview_plot(eems, spp = 9, contour = TRUE)
class(eems_trimmed)
#if (inherits (eems, "eemlist"))
eems_trimmed <- lapply(eems, function(eem) {
eems$emission <- eems$emission[eems$emission <= 799]  # Trim emission wavelengths
eems$intensity <- eems$intensity[, eems$emission <= 799]  # Trim intensity matrix accordingly
eem
})
class(eems_trimmed)
#Read in datafile directly from data generated by aqualog
eems <- eem_read("A_EEMs", import_function = "aqualog")
#if (inherits (eems, "eemlist"))
eems_trimmed <- lapply(eems, function(eem) {
eems$emission <- eems$emission[eems$emission <= 799]  # Trim emission wavelengths
eems$intensity <- eems$intensity[, eems$emission <= 799]  # Trim intensity matrix accordingly
eem
})
class(eems_trimmed)
#Initialize libraries
library(staRdom)
library(dplyr)
library(ggplot2)
library(eemR)
