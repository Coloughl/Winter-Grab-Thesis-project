print("❌ Sample names do NOT match.")
}ABS_names <- basename(ABS_files) %>%
if (setequal(ABS_names, EEMs_names)) {
print("✅ Sample names match between ABS and EEMs.")
} else {
print("❌ Sample names do NOT match.")
}
print(BEEMs_files)
ABS_input_dir <- "Practice_3"
ABS_output_dir <- "Practice_3/ABS_corrected"
#Making output directories for ABS and EEMs data
EEMs_input_dir <- "Practice_3"
EEMs_output_dir <- "Practice_3/EEMs_corrected"
BEEMs_output_dir <- "Practice_3/EEMs_corrected"
#Grabbing all ABS files and making a list variable
ABS_files <- list.files(path = ABS_input_dir, pattern = "\\(01\\) - Abs Spectra Graphs\\.dat$", full.names = TRUE)
print(ABS_files)
#Grabbing all EEMs files and making a list variable, then removing any blank files from the list
EEMs_files <- list.files(path = EEMs_input_dir, pattern = "\\(01\\) - Sample - Blank Waterfall Plot\\.dat$", full.names = TRUE)
print(EEMs_files)
#Making sure that there is a EEMs file for every ABS file
ABS_names <- basename(ABS_files) %>%
gsub(" \\(01\\) - Abs Spectra Graphs\\.dat$", "", .)
# Extract sample names from EEMs file paths
EEMs_names <- basename(EEMs_files) %>%
gsub(" \\(01\\) - Sample - Blank Waterfall Plot\\.dat$", "", .)
# Check for matches
cat("Samples in ABS but not in EEMs:\n")
print(setdiff(ABS_names, EEMs_names))
cat("Samples in EEMs but not in ABS:\n")
print(setdiff(EEMs_names, ABS_names))
if (setequal(ABS_names, EEMs_names)) {
print("✅ Sample names match between ABS and EEMs.")
} else {
print("❌ Sample names do NOT match.")
}
print(BEEMs_files)
#This line is what grabs the blank file
BEEMs_files <- list.files(path = EEMs_input_dir, pattern = "\\(01\\) - Waterfall Plot Blank\\.dat$", full.names = TRUE)
print(BEEMs_files)
for (file in ABS_files) {
# Read tab-delimited .dat file, skipping first 3 rows
data <- read.delim(file, skip = 3, header = FALSE)
# Define the output filename with .csv extension
new_file_name <- paste0(tools::file_path_sans_ext(basename(file)), ".csv")
new_file <- file.path(ABS_output_dir, new_file_name)
# Write to .csv without quotes and row names
write.csv(data, file = new_file, row.names = FALSE, quote = FALSE)
print(paste("Converted and saved:", new_file))
}
for (file in ABS_files) {
# Read tab-delimited .dat file, skipping first 3 rows
data <- read.delim(file, skip = 3, header = FALSE)
data_modified <- data[,-c(2,3,4,5,6,7,8,9,11)]
# Define the output filename with .csv extension
new_file_name <- paste0(tools::file_path_sans_ext(basename(file)), ".csv")
new_file <- file.path(ABS_output_dir, new_file_name)
# Write to .csv without quotes and row names
write.csv(data, file = new_file, row.names = FALSE, quote = FALSE)
print(paste("Converted and saved:", new_file))
}
for (file in ABS_files) {
# Read tab-delimited .dat file, skipping first 3 rows
data <- read.delim(file, skip = 3, header = FALSE)
data_modified <- data[, -c(2:9, 11)]
# Define the output filename with .csv extension
new_file_name <- paste0(tools::file_path_sans_ext(basename(file)), ".csv")
new_file <- file.path(ABS_output_dir, new_file_name)
# Write to .csv without quotes and row names
write.csv(data, file = new_file, row.names = FALSE, quote = FALSE)
print(paste("Converted and saved:", new_file))
}
for (file in ABS_files) {
# Read the comma-separated .dat file, skipping the first 3 metadata rows
data <- read.csv(file, skip = 3, header = FALSE)
# Remove columns 2–9 and 11
data_modified <- data[, -c(2:9, 11)]
# Define the output filename with .csv extension
new_file_name <- paste0(tools::file_path_sans_ext(basename(file)), ".csv")
new_file <- file.path(ABS_output_dir, new_file_name)
# Save the cleaned data to CSV
write.csv(data_modified, file = new_file, row.names = FALSE, quote = FALSE)
print(paste("Processed and saved:", new_file))
}
for (file in ABS_files) {
# Read the space-separated .dat file, skipping the first 3 lines
data <- read.table(file, skip = 3, header = FALSE, sep = "", strip.white = TRUE, fill = TRUE)
# Remove columns 2 through 9 and column 11 if they exist
columns_to_remove <- c(2:9, 11)
columns_to_remove <- columns_to_remove[columns_to_remove <= ncol(data)]
data_modified <- data[, -columns_to_remove, drop = FALSE]
# Create output file name with .csv extension
new_file_name <- paste0(tools::file_path_sans_ext(basename(file)), ".csv")
new_file <- file.path(ABS_output_dir, new_file_name)
# Write cleaned data to CSV
write.csv(data_modified, file = new_file, row.names = FALSE, quote = FALSE)
print(paste("Processed and saved:", new_file))
}
ABS <- read.table("Practice_3/ABS_corrected/A118Feb25 (01) - Abs Spectra Graphs.dat")
ABS <- read.table("Practice_3//A118Feb25 (01) - Abs Spectra Graphs.dat")
ABS <- read.table("Practice_3/A118Feb25 (01) - Abs Spectra Graphs.dat")
ABS <- read.table("Practice_3/A118Feb25 (01) - Abs Spectra Graphs.dat", skip = 3, header = FALSE, sep = "", strip.white = TRUE, fill = TRUE)
View(ABS)
ABS <- read.table("Practice_3/A118Feb25 (01) - Abs Spectra Graphs.dat", skip = 4, header = FALSE, sep = "", strip.white = TRUE, fill = TRUE)
View(ABS)
ABS <- read.table("Practice_3/A118Feb25 (01) - Abs Spectra Graphs.dat", skip = 2, header = FALSE, sep = "", strip.white = TRUE, fill = TRUE)
View(ABS)
ABS <- read.table("Practice_3/A118Feb25 (01) - Abs Spectra Graphs.dat", skip = 2.5, header = FALSE, sep = "", strip.white = TRUE, fill = TRUE)
ABS <- read.table("Practice_3/A118Feb25 (01) - Abs Spectra Graphs.dat", skip = 3, header = FALSE, sep = "", strip.white = TRUE, fill = TRUE)
View(ABS)
ABS <- read.table("Practice_3/A118Feb25 (01) - Abs Spectra Graphs.dat")
ABS <- readLines("Practice_3/A118Feb25 (01) - Abs Spectra Graphs.dat")
head(ABS, 10)
ABS <- read.table("Practice_3/A118Feb25 (01) - Abs Spectra Graphs.dat",
skip = 3, header = FALSE, sep = "", fill = TRUE, strip.white = TRUE,
comment.char = "")
View(ABS)
ABS <- read.table("Practice_3//A118Feb25 (01) - Abs Spectra Graphs.dat", skip = 3, sep = "\t", header = FALSE, fill = TRUE)
View(ABS)
str(ABS)
for (file in ABS_files) {
# Read the space-separated .dat file, skipping the first 3 lines
data <- read.table(file, skip = 3, sep = "\t", header = FALSE, fill = TRUE)
# Remove columns 2 through 9 and column 11. Leaves only OD column
columns_to_remove <- c(2:9, 11)
columns_to_remove <- columns_to_remove[columns_to_remove <= ncol(data)]
data_modified <- data[, -columns_to_remove, drop = FALSE]
# Create output file name with .csv extension
new_file_name <- paste0(tools::file_path_sans_ext(basename(file)), ".csv")
new_file <- file.path(ABS_output_dir, new_file_name)
# Write cleaned data to CSV
write.csv(data_modified, file = new_file, row.names = FALSE, quote = FALSE)
print(paste("Processed and saved:", new_file))
}
for (file in ABS_files) {
# Read the space-separated .dat file, skipping the first 3 lines
data <- read.table(file, skip = 3, sep = "\t", header = FALSE, fill = TRUE)
# Remove columns 2 through 9 and column 11. Leaves only OD column
data_modified <- data[-c(2,3), -c(2:9,11)]
# Create output file name with .csv extension
new_file_name <- paste0(tools::file_path_sans_ext(basename(file)), ".csv")
new_file <- file.path(ABS_output_dir, new_file_name)
# Write cleaned data to CSV
write.csv(data_modified, file = new_file, row.names = FALSE, quote = FALSE)
print(paste("Processed and saved:", new_file))
}
for (file in ABS_files) {
# Read the space-separated .dat file, skipping the first 3 lines
data <- read.table(file, skip = 3, sep = "\t", header = FALSE, fill = TRUE)
# Remove columns 2 through 9 and column 11. Leaves only OD column
data_modified <- data[-c(2,3), -c(2:9,11)]
# Create output file name with .csv extension
new_file_name <- paste0(tools::file_path_sans_ext(basename(file)), ".csv")
new_file <- file.path(ABS_output_dir, new_file_name)
# Write cleaned data to CSV
write.csv(data_modified, file = new_file, row.names = FALSE, quote = FALSE)
print(paste("Processed and saved:", new_file))
}
for (file in ABS_files) {
# Read the space-separated .dat file, skipping the first 3 lines
data <- read.table(file, skip = 3, sep = "\t", header = FALSE, fill = TRUE)
# Remove columns 2 through 9 and column 11. Leaves only OD column
data_modified <- data[-c(2,3), -c(2:9,11)]
# Create output file name with .csv extension
new_file_name <- paste0(tools::file_path_sans_ext(basename(file)), ".csv")
new_file <- file.path(ABS_output_dir, new_file_name)
# Write cleaned data to CSV
write.csv(data_modified, file = new_file, row.names = FALSE, col.names = TRUE, quote = FALSE)
print(paste("Processed and saved:", new_file))
}
for (file in ABS_files) {
# Read the space-separated .dat file, skipping the first 3 lines
data <- read.table(file, skip = 3, sep = "\t", header = FALSE, fill = TRUE)
# Remove columns 2 through 9 and column 11. Leaves only OD column
data_modified <- data[-c(2,3), -c(2:9,11)]
# Create output file name with .csv extension
new_file_name <- paste0(tools::file_path_sans_ext(basename(file)), ".csv")
new_file <- file.path(ABS_output_dir, new_file_name)
# Write cleaned data to CSV
write.csv(data_modified, file = new_file, row.names = FALSE, col.names = FALSE, quote = FALSE)
print(paste("Processed and saved:", new_file))
}
for (file in ABS_files) {
# Read the space-separated .dat file, skipping the first 3 lines
data <- read.table(file, skip = 3, sep = "\t", header = FALSE, fill = TRUE)
# Remove columns 2 through 9 and column 11. Leaves only OD column
data_modified <- data[-c(2,3), -c(2:9,11)]
# Create output file name with .csv extension
new_file_name <- paste0(tools::file_path_sans_ext(basename(file)), ".csv")
new_file <- file.path(ABS_output_dir, new_file_name)
# Write cleaned data to CSV
write.table(data_modified, file = new_file, sep = ",", row.names = FALSE, col.names = FALSE, quote = FALSE)
print(paste("Processed and saved:", new_file))
}
for (file in ABS_files) {
# Read the space-separated .dat file, skipping the first 3 lines
data <- read.table(file, skip = 3, sep = "\t", header = FALSE, fill = TRUE)
# Remove columns 2 through 9 and column 11. Leaves only OD column
data_modified <- data[-c(2,3), -c(2:9,11)]
# Create output file name with .csv extension
sample_name <- gsub(" \\(01\\) - Abs Spectra Graphs\\.dat$", "", basename(file))
new_file_name <- paste0(sample_name, ".csv")
new_file <- file.path(ABS_output_dir, new_file_name)
# Write cleaned data to CSV
write.table(data_modified, file = new_file, sep = ",", row.names = FALSE, col.names = FALSE, quote = FALSE)
print(paste("Processed and saved:", new_file))
}
for (file in ABS_files) {
# Read the space-separated .dat file, skipping the first 3 lines
data <- read.table(file, skip = 3, sep = "\t", header = FALSE, fill = TRUE)
# Remove columns 2 through 9 and column 11. Leaves only OD column
data_modified <- data[-c(2,3), -c(2:9,11)]
# Create output file name with .csv extension
sample_name <- gsub(" \\(01\\) - Abs Spectra Graphs\\.dat$", "", basename(file))
new_file_name <- paste0(sample_name, ".csv")
new_file <- file.path(ABS_output_dir, new_file_name)
# Write cleaned data to CSV
write.table(data_modified, file = new_file, sep = ",", row.names = FALSE, col.names = FALSE, quote = FALSE)
print(paste("Processed and saved:", new_file))
}
# Check for matches
cat("Samples in ABS but not in EEMs:\n") %>%
print(setdiff(ABS_names, EEMs_names))
# Check for matches
cat("Samples in ABS but not in EEMs:\n") %>%
print(setdiff(ABS_names, EEMs_names))
#Making sure that there is a EEMs file for every ABS file
ABS_names <- basename(ABS_files) %>%
gsub(" \\(01\\) - Abs Spectra Graphs\\.dat$", "", .)
# Extract sample names from EEMs file paths
EEMs_names <- basename(EEMs_files) %>%
gsub(" \\(01\\) - Sample - Blank Waterfall Plot\\.dat$", "", .)
# Check for matches
cat("Samples in ABS but not in EEMs:\n") %>%
print(setdiff(ABS_names, EEMs_names))
# Check for matches
cat("Samples in ABS but not in EEMs:\n") |
print(setdiff(ABS_names, EEMs_names))
# Check for matches
cat("Samples in ABS but not in EEMs:\n")
print(setdiff(ABS_names, EEMs_names))
# Check for matches
ABS_names %>%
setdiff(EEMs_names) %>%
print()
EEMs_names %>%
setdiff(ABS_names) %>%
print()
#Check to see if the names are exactly the same (nessecary for EEMs pipeline)
if (setequal(ABS_names, EEMs_names)) {
print("✅ Sample names match between ABS and EEMs.")
} else {
print("❌ Sample names do NOT match.")
}
run_date <- "9Apr25"
blank_file_name <- paste0("blank", run_date)
print(EEMs_files)
EEMs <- read.table("Practice_3/A118Feb25 (01) - Sample - Blank Waterfall Plot.dat", skip = 3, sep = "\t", header = FALSE, fill = TRUE)
View(EEMs)
View(EEMs)
EEMs <- read.table("Practice_3/A118Feb25 (01) - Sample - Blank Waterfall Plot.dat", skip = 3, sep = "\t", header = TRUE, fill = TRUE)
View(EEMs)
EEMs <- read.table("Practice_3/A118Feb25 (01) - Sample - Blank Waterfall Plot.dat",sep = "\t", header = FALSE)
View(EEMs)
for (file in EEMs_files) {
# Read the CSV with headers
data <- read.table(file, sep = "\t", header = FALSE)
# Remove rows 2 and 3 (if needed)
data <- data[-2, ]
# Remove rows 239 to 250
data <- data[-c(243:252), ]  # Adjust as needed
data <- data[-2, ]
# Convert entire data frame to character (to allow blanking A1)
data[] <- lapply(data, as.character)
# Blank out cell A1
data[1, 1] <- ""
# Build output path
sample_name <- gsub("\\(01\\) - Sample - Blank Waterfall Plot\\.dat$", "", basename(file))
new_file_name <- paste0(sample_name, ".csv")
new_file <- file.path(ABS_output_dir, new_file_name)
# Write line by line to fully control formatting
writeLines(
apply(data, 1, function(row) paste(row, collapse = ",")),
con = new_file
)
print(paste("Processed and saved:", new_file))
}
for (file in EEMs_files) {
# Read the CSV with headers
data <- read.table(file, sep = "\t", header = FALSE)
# Remove rows 2 and 3 (if needed)
data <- data[-2, ]
# Remove rows 239 to 250
data <- data[-c(243:252), ]  # Adjust as needed
data <- data[-2, ]
# Convert entire data frame to character (to allow blanking A1)
data[] <- lapply(data, as.character)
# Blank out cell A1
data[1, 1] <- ""
# Build output path
sample_name <- gsub("\\(01\\) - Sample - Blank Waterfall Plot\\.dat$", "", basename(file))
new_file_name <- paste0(sample_name, ".csv")
new_file <- file.path(EEMs_output_dir, new_file_name)
# Write line by line to fully control formatting
writeLines(
apply(data, 1, function(row) paste(row, collapse = ",")),
con = new_file
)
print(paste("Processed and saved:", new_file))
}
for (file in EEMs_files) {
# Read the CSV with headers
data <- read.table(file, sep = "\t", header = FALSE)
# Remove rows 2 and 3 (if needed)
data <- data[-2, ]
# Remove rows 239 to 250
data <- data[-c(243:252), ]  # Adjust as needed
data <- data[-c(2,3), ]
# Convert entire data frame to character (to allow blanking A1)
data[] <- lapply(data, as.character)
# Blank out cell A1
data[1, 1] <- ""
# Build output path
sample_name <- gsub("\\(01\\) - Sample - Blank Waterfall Plot\\.dat$", "", basename(file))
new_file_name <- paste0(sample_name, ".csv")
new_file <- file.path(EEMs_output_dir, new_file_name)
# Write line by line to fully control formatting
writeLines(
apply(data, 1, function(row) paste(row, collapse = ",")),
con = new_file
)
print(paste("Processed and saved:", new_file))
}
for (file in EEMs_files) {
# Read the CSV with headers
data <- read.table(file, sep = "\t", header = FALSE)
# Remove rows 2 and 3 (if needed)
data <- data[-2, ]
# Remove rows 239 to 250
data <- data[-c(244:252), ]  # Adjust as needed
data <- data[-c(2,3), ]
# Convert entire data frame to character (to allow blanking A1)
data[] <- lapply(data, as.character)
# Blank out cell A1
data[1, 1] <- ""
# Build output path
sample_name <- gsub("\\(01\\) - Sample - Blank Waterfall Plot\\.dat$", "", basename(file))
new_file_name <- paste0(sample_name, ".csv")
new_file <- file.path(EEMs_output_dir, new_file_name)
# Write line by line to fully control formatting
writeLines(
apply(data, 1, function(row) paste(row, collapse = ",")),
con = new_file
)
print(paste("Processed and saved:", new_file))
}
for (file in ABS_files) {
# Read the space-separated .dat file, skipping the first 3 lines
data <- read.table(file, skip = 3, sep = "\t", header = FALSE, fill = TRUE)
# Remove columns 2 through 9 and column 11. Leaves only OD column
data_modified <- data[-c(2,3), -c(2:9,11)]
# Create output file name with .csv extension
sample_name <- gsub(" \\(01\\) - Abs Spectra Graphs\\.dat$", "", basename(file))
new_file_name <- paste0(sample_name, ".csv")
new_file <- file.path(ABS_output_dir, new_file_name)
# Write cleaned data to CSV
write.table(data_modified, file = new_file, sep = ",", row.names = FALSE, col.names = FALSE, quote = FALSE)
print(paste("Processed and saved:", new_file))
}
for (file in EEMs_files) {
# Read the CSV with headers
data <- read.table(file, sep = "\t", header = FALSE)
# Remove rows 2 and 3 (if needed)
data <- data[-2, ]
# Remove rows 239 to 250
data <- data[-c(244:252), ]  # Adjust as needed
data <- data[-c(2,3), ]
# Convert entire data frame to character (to allow blanking A1)
data[] <- lapply(data, as.character)
# Blank out cell A1
data[1, 1] <- ""
# Build output path
sample_name <- gsub("\\(01\\) - Sample - Blank Waterfall Plot\\.dat$", "", basename(file))
new_file_name <- paste0(sample_name, ".csv")
new_file <- file.path(EEMs_output_dir, new_file_name)
# Write line by line to fully control formatting
writeLines(
apply(data, 1, function(row) paste(row, collapse = ",")),
con = new_file
)
print(paste("Processed and saved:", new_file))
}
for (file in BEEMs_files) {
data <- read.table(file, sep = "\t", header = FALSE)
# Remove rows 239 to 250
data_modified <- data[-c(239:250), ]
data[] <- lapply(data, as.character)
# Blank out cell A1
data[1, 1] <- ""
#sample_name <- gsub("\\(01\\) - Waterfall Plot Blank\\.dat$", "", basename(file))
new_file_name <- paste0(sample_name, ".csv")
new_file <- file.path(EEMs_output_dir, new_file_name)
# Define the new file path in the output directory
new_file <- file.path(BEEMs_output_dir ,new_file_name)  # 'basename' keeps the original filename
# Save to the new directory with the same filename (no '_modified' added)
#
writeLines(
apply(data, 1, function(row) paste(row, collapse = ",")),
con = new_file)
#write.csv(data_modified, file = new_file, row.names = FALSE, col.names = TRUE)
print(paste("Processed and saved:", new_file))
}
for (file in BEEMs_files) {
data <- read.table(file, sep = "\t", header = FALSE)
# Remove rows 239 to 250
data_modified <- data[-c(239:250), ]
data[] <- lapply(data, as.character)
# Blank out cell A1
data[1, 1] <- ""
sample_name <- gsub("\\(01\\) - Waterfall Plot Blank\\.dat$", "", basename(file))
new_file_name <- paste0(sample_name, ".csv")
new_file <- file.path(EEMs_output_dir, new_file_name)
# Define the new file path in the output directory
new_file <- file.path(BEEMs_output_dir ,new_file_name)  # 'basename' keeps the original filename
# Save to the new directory with the same filename (no '_modified' added)
#
writeLines(
apply(data, 1, function(row) paste(row, collapse = ",")),
con = new_file)
#write.csv(data_modified, file = new_file, row.names = FALSE, col.names = TRUE)
print(paste("Processed and saved:", new_file))
}
run_date <- "9Apr25"
blank_file_name <- paste0("blank", run_date, ".csv")
blank_file_path <- file.path(BEEMs_output_dir, blank_file_name)
for (file in BEEMs_files) {
data <- read.table(file, sep = "\t", header = FALSE)
# Remove rows 239 to 250
#data_modified <- data[-c(239:250), ]
data[] <- lapply(data, as.character)
# Blank out cell A1
data[1, 1] <- ""
#sample_name <- gsub("\\(01\\) - Waterfall Plot Blank\\.dat$", "", basename(file))
#new_file_name <- paste0(blank_file_name, ".csv")
blank_file_path <- file.path(BEEMs_output_dir, blank_file_name)
# Define the new file path in the output directory
#new_file <- file.path(BEEMs_output_dir ,new_file_name)  # 'basename' keeps the original filename
# Save to the new directory with the same filename (no '_modified' added)
#
writeLines(
apply(data, 1, function(row) paste(row, collapse = ",")),
con = blank_file_path)
#write.csv(data_modified, file = new_file, row.names = FALSE, col.names = TRUE)
print(paste("Processed and saved:", new_file))
}
print(paste("Processed and saved:", blank_file_name))
for (file in ABS_files) {
# Read the space-separated .dat file, skipping the first 3 lines
data <- read.table(file, skip = 3, sep = "\t", header = FALSE, fill = TRUE)
# Remove columns 2 through 9 and column 11. Leaves only OD column
data_modified <- data[-c(2,3), -c(2:9,11)]
# Create output file name with .csv extension
sample_name <- gsub(" \\(01\\) - Abs Spectra Graphs\\.dat$", "", basename(file))
new_file_name <- paste0(sample_name, ".csv")
new_file <- file.path(ABS_output_dir, new_file_name)
# Write cleaned data to CSV
write.table(data_modified, file = new_file, sep = ",", row.names = FALSE, col.names = FALSE, quote = FALSE)
print(paste("Processed and saved:", new_file))
}
for (file in EEMs_files) {
# Read the CSV with headers
data <- read.table(file, sep = "\t", header = FALSE)
# Remove rows 2 and 3 (if needed)
data <- data[-2, ]
# Remove rows 239 to 250
data <- data[-c(244:252), ]  # Adjust as needed
data <- data[-c(2,3), ]
# Convert entire data frame to character (to allow blanking A1)
data[] <- lapply(data, as.character)
# Blank out cell A1
data[1, 1] <- ""
# Build output path
sample_name <- gsub("\\(01\\) - Sample - Blank Waterfall Plot\\.dat$", "", basename(file))
new_file_name <- paste0(sample_name, ".csv")
new_file <- file.path(EEMs_output_dir, new_file_name)
# Write line by line to fully control formatting
writeLines(
apply(data, 1, function(row) paste(row, collapse = ",")),
con = new_file
)
print(paste("Processed and saved:", new_file))
}
for (file in BEEMs_files) {
data <- read.table(file, sep = "\t", header = FALSE)
# Remove rows 239 to 250
#data_modified <- data[-c(239:250), ]
data[] <- lapply(data, as.character)
# Blank out cell A1
data[1, 1] <- ""
#sample_name <- gsub("\\(01\\) - Waterfall Plot Blank\\.dat$", "", basename(file))
#new_file_name <- paste0(blank_file_name, ".csv")
blank_file_path <- file.path(BEEMs_output_dir, blank_file_name)
# Define the new file path in the output directory
#new_file <- file.path(BEEMs_output_dir ,new_file_name)  # 'basename' keeps the original filename
# Save to the new directory with the same filename (no '_modified' added)
#
writeLines(
apply(data, 1, function(row) paste(row, collapse = ",")),
con = blank_file_path)
#write.csv(data_modified, file = new_file, row.names = FALSE, col.names = TRUE)
print(paste("Processed and saved:", blank_file_name))
}
